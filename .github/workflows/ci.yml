name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

env:
  NODE_VERSION: '20.19.0'
  PNPM_VERSION: '10.14.0'

jobs:
  # Job 1: Lint and format check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: |
          # Check if root has lint script
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            echo "Running root lint script..."
            pnpm lint
          else
            echo "No root lint script found, checking individual packages..."
            # Try linting individual packages
            for dir in aws-cdk-examples/*/; do
              if [ -f "$dir/package.json" ] && grep -q '"lint"' "$dir/package.json"; then
                echo "Linting $dir..."
                cd "$dir" && pnpm lint && cd ../..
              fi
            done
            for dir in aws-sdk-examples/*/; do
              if [ -f "$dir/package.json" ] && grep -q '"lint"' "$dir/package.json"; then
                echo "Linting $dir..."
                cd "$dir" && pnpm lint && cd ../..
              fi
            done
          fi

      - name: Check formatting
        run: |
          if [ -f "package.json" ] && grep -q '"format:check"' package.json; then
            pnpm format:check
          else
            echo "No format:check script found, skipping..."
          fi

  # Job 2: Build all packages
  build:
    name: Build All Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - aws-cdk-examples/eks
          - aws-sdk-examples/list-lambdas
          - aws-sdk-examples/list-pods
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: |
          cd ${{ matrix.package }}
          if [ -f "package.json" ] && grep -q '"build"' package.json; then
            pnpm build
          else
            echo "No build script found for ${{ matrix.package }}, skipping..."
          fi

      - name: Generate artifact name
        id: artifact-name
        run: echo "name=build-$(echo '${{ matrix.package }}' | tr '/' '-')-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: ${{ matrix.package }}/dist
          retention-days: 1


  # Job 4: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          if pnpm audit --audit-level high --json > audit.json 2>/dev/null; then
            echo "No high-severity vulnerabilities found"
          else
            echo "High-severity vulnerabilities detected!"
            cat audit.json
            exit 1
          fi

  # Job 5: Quality gate (runs only on PRs)
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, build, security]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quality gate passed
        run: |
          echo "ðŸŽ‰ All quality checks passed!"
          echo "âœ… Linting: Passed"
          echo "âœ… Build: Passed" 
          echo "âœ… Tests: Skipped"
          echo "âœ… Coverage: Skipped"
          echo "âœ… Security: No critical vulnerabilities"
          echo ""
          echo "This pull request is ready for review! ðŸš€"

  # Job 6: Auto-merge dependabot PRs (optional)
  auto-merge-dependabot:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: [lint, build, security]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Enable auto-merge for Dependabot PRs
        continue-on-error: true
        run: |
          echo "Dependabot PR auto-merge triggered."
          echo "âœ… Linting: Passed"
          echo "âœ… Build: Passed"
          echo "âœ… Security: No critical vulnerabilities"
          echo "âœ… Tests: Skipped"
          echo "âœ… Coverage: Skipped"
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}